#include  <iostream> 
#include <vector>
#include <string>
#include <algorithm>    // std::sort

using namespace std;
 
int show(int No, vector<string> WTF)
{
  cout<<"Case #"<<No<<":"<<endl;
  for(int i=0;i<WTF.size();i++)cout<<WTF[i]<<endl;
  return 0;
}

int show(int No, vector<string> WTF,int BK)
{
  cout<<"Case #"<<No<<":"<<endl;
       int center=1;
   	   int len_center=WTF.size()/2;
      while(BK>1)
      {
        center*=3;
        BK--;
      }
      BK=center;
      center/=2;
 int bg=len_center-center;
  for(int i=0;i<BK;i++)cout<<WTF[i].substr(bg,BK)<<endl;
  return 0;
}
int main()
{
  	int T,n;
  	cin>>T; //case num
    if(T==0)return 0;
	vector<int> v(T,0);
  	for(int i=0;i<T;i++)
    {
    	cin>>v[i];
    }
  vector<int> v0=v;
  sort(v.begin(),v.end());
  int max=v[T-1];
  //cout<<max; 需要生成的最大层数 
  int BK;
  vector<string> WTF;
  WTF.push_back("o");
  if(max==1){
  	for(int i=0;i<T;i++)show(i,WTF);
  }
  for(int i=2;i<=max ;i++)
  {
  BK=WTF.size();
    for(int jj=0;jj<2;jj++){
      for(int j=0;j<BK;j++){
        WTF.push_back(WTF[j]);//????
      }    
    }
    for(int j=0;j<BK;j++){//????
//      string &insert(int p0,const string &s, int pos, int n);
      WTF[j+BK].insert(0, WTF[j] );
      WTF[j+BK].insert(0, WTF[j] );
    }    
    
    for(int j=0;j<BK;j++){
      WTF[j].insert(0, BK, ' ');
      WTF[j].insert(BK*2, BK, ' ');
      WTF[j+BK*2].insert(0, BK, ' ');
      WTF[j+BK*2].insert(BK*2, BK, ' ');
    }
    //show(233,WTF);
  }

  	for(int i=0;i<T;i++)
    {
      show(i+1,WTF,v0[i]);
      
    }
    return 0;
}

                    